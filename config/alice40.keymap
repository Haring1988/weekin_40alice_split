#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos {
        compatible = "zmk,combos";

        home {
            bindings = <&none>;
            key-positions = <3 4>;
        };

        end {
            bindings = <&none>;
            key-positions = <15 16>;
        };

        pu {
            bindings = <&none>;
            key-positions = <7 8>;
        };

        pd {
            bindings = <&none>;
            key-positions = <19 20>;
        };
    };

    macros {
        key: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(C) &kp H &kp L &kp DOT &kp N8 &kp N8 &kp N0 &kp N6 &kp N0 &kp N2 &kp EXCL &kp AT &kp POUND &kp DLLR &kp PRCNT &kp ENTER>;
            label = "NEW_MACRO";
            wait-ms = <10>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base_layer {
            label = "BASE";
            bindings = <
&kp ESC       &kp Q         &kp W  &kp E         &kp R  &kp T        &kp Y      &kp U  &kp I         &kp O     &kp P          &kp BACKSPACE
&kp CAPSLOCK  &kp A         &kp S  &kp D         &kp F  &lt 3 G      &kp H      &kp J  &kp K         &kp L     &kp SEMICOLON  &kp ENTER
&kp LSHIFT    &kp Z         &kp X  &kp C         &kp V  &kp B        &kp N      &kp M  &kp COMMA     &kp DOT   &kp FSLH       &lt 3 TAB
&lt 4 G       &kp LEFT_WIN         &kp LEFT_ALT         &lt 1 SPACE  &kp SPACE  &mo 2  &kp UP_ARROW  &kp DOWN  &kp LEFT       &lt 4 RIGHT_ARROW
            >;
        };

        Number_layer {
            bindings = <
&kp GRAVE  &kp NUMBER_1  &kp N2        &kp N3    &kp N4             &kp N5   &kp N6     &kp N7    &kp N8        &kp N9    &kp N0    &kp BSPC
&kp DEL    &kp MINUS     &kp EQUAL     &kp F2    &kp F5             &none    &none      &kp BSLH  &kp LBKT      &kp RBKT  &kp SEMI  &kp APOS
&kp LSHFT  &kp K_MUTE    &kp K_VOL_UP  &key      &kp K_VOLUME_DOWN  &kp TAB  &none      &trans    &trans        &trans    &none     &kp TAB
&kp LCTRL  &kp LGUI                    &kp LALT                     &trans   &kp SPACE  &kp LALT  &kp UP_ARROW  &kp DOWN  &kp LEFT  &kp RIGHT
            >;

            label = "NUMBER";
        };

        F_layer {
            bindings = <
&kp LS(GRAVE)  &kp LS(EXCL)   &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)  &kp LS(RPAR)  &kp BSPC
&kp DEL        &kp LS(UNDER)  &kp LS(PLUS)  &trans         &trans        &trans         &trans         &kp LS(BSLH)  &kp LS(LBKT)   &kp LS(RBKT)  &kp LS(SEMI)  &kp APOS
&kp F1         &kp F2         &kp F3        &kp F4         &kp F5        &kp F6         &kp F7         &kp F8        &kp LS(COMMA)  &kp LS(DOT)   &kp LS(FSLH)  &none
&kp F9         &kp F10                      &kp F11                      &kp F12        &kp SPACE      &trans        &none          &none         &none         &none
            >;

            label = "F";
        };

        Function_layer {
            bindings = <
&ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &kp N7  &kp N8      &kp N9     &kp LS(EQUAL)   &kp MINUS       &kp BSPC
&bt BT_CLR         &bt BT_CLR_ALL    &bt BT_NXT         &bt BT_PRV       &none            &none            &kp N4  &kp N5      &kp N6     &kp LS(N8)      &kp FSLH        &kp ENTER
&bt BT_SEL 0       &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4     &bt BT_DISC 4    &kp N1  &kp N2      &kp N3     &kp LS(N9)      &kp LS(N0)      &trans
&bt BT_DISC 0      &bt BT_DISC 1                        &bt BT_DISC 2                     &bt BT_DISC 3    &kp N0  &kp PERIOD  &kp EQUAL  &kp DOWN_ARROW  &kp LEFT_ARROW  &kp RIGHT_ARROW
            >;

            label = "Function";
        };

        layer_4 {
            bindings = <
&ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &bl BL_ON        &bl BL_OFF       &bl BL_TOG       &trans  &trans  &trans  &trans  &trans  &trans
&bl BL_CYCLE       &rgb_ug RGB_TOG   &rgb_ug RGB_ON     &rgb_ug RGB_OFF  &rgb_ug RGB_EFF  &rgb_ug RGB_EFR  &trans  &trans  &trans  &trans  &trans  &trans
&trans             &trans            &trans             &trans           &trans           &trans           &trans  &trans  &trans  &trans  &trans  &trans
&trans             &trans                               &trans                            &trans           &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
